// syntax = "proto3";

// package proto;

// option go_package = "proto;chatpb";

// message User {
//     string id = 1;
//     string name = 2;
// }

// message Message {
//     string id = 1;
//     string content = 2;
//     string timestamp = 3;
// }

// message Connect {
//     User user = 1;
//     bool active = 2;
// }

// message Close {}

// service Broadcast {
//   rpc CreateStream(Connect) returns (stream Message);
//   rpc BroadcastMessage(Message) returns (Close);
// }

syntax = "proto3";

package service;

option go_package = "proto;pb";

message User {
    string id = 1;
    string email = 2;
    string password = 3;
    string name = 4;
    string phoneNumber = 5;
    repeated Wallet wallets = 6;
    repeated string friends = 7;
}

message Wallet {
    string title = 1;
    string address = 2;
}

message CreateUserReq {
    User user = 1; 
}

message CreateUserRes {
    User user = 1; 
    string AccessToken = 2;
}

message LoginUserReq {
    string email = 1;
    string password = 2;
}

message LoginUserRes {
    User user = 1; 
    string AccessToken = 2;
}

message ReadUserReq {
    string id = 1;
}

message ReadUserRes {
    User user = 1;
}

message UpdateUserReq {
    User user = 1;
}

message UpdateUserRes {
    User user = 1;
}

message DeleteUserReq {
    string id = 1;
}

message DeleteUserRes {
    bool success = 1;
}

message ListUsersReq {}

message ListUsersRes {
    User user = 1;
}

message UpdateFriendUserReq {
    repeated string id = 1;
}

message UpdateFriendUserRes {
    bool success = 1;
}

message ListFriendsUserReq {
    string AccessToken = 1;
}

message ListFriendsUserRes {
    // repeated User user = 1;
    User user = 1;
}

message ListXFriendsUserReq {
    string number = 1;
}

message ListXFriendsUserRes {
    repeated User friends = 1;
}


message UpdateWalletUserReq {
    Wallet wallet = 1;
}

message UpdateWalletUserRes {
    bool success = 1;
}

message ListWalletUserReq {
    string AccessToken = 1;
}

message ListWalletUserRes {
    // repeated User user = 1;
    User user = 1;
}

message Event {
    string id = 1;
    string author_id = 2;
    string title = 3;
    string content= 4;
}

message CreateEventReq {
    Event event = 1; // Event id blank
}

message CreateEventRes {
    Event event = 1; // Event id filled in
}

message ReadEventReq {
    string id = 1;
}

message ReadEventRes {
    Event event = 1;
}

message UpdateEventReq {
    Event event = 1;
}

message UpdateEventRes {
    Event event = 1;
}

message DeleteEventReq {
    string id = 1;
}

message DeleteEventRes {
    bool success = 1;
}

message ListEventsReq {}

message ListEventsRes {
    Event event = 1;
}

// For Files 

message Chunk {
    bytes Content = 1;
}

message DownloadReq {
    string fileName = 1;
}

// message UploadStatus {
//     string Message = 1;
//     UploadStatusCode Code = 2;
// }

// enum UploadStatusCode {
//     Unknown = 0;
//     Ok = 1;
//     Failed = 2;
// }

service Service {
    rpc CreateUser(CreateUserReq) returns (CreateUserRes);
    rpc LoginUser(LoginUserReq) returns (LoginUserRes);
    rpc ReadUser(ReadUserReq) returns (ReadUserRes);
    rpc UpdateUser(UpdateUserReq) returns (UpdateUserRes);
    rpc DeleteUser(DeleteUserReq) returns (DeleteUserRes);
    rpc ListUsers(ListUsersReq) returns (stream ListUsersRes);
    rpc AddFriendUser(UpdateFriendUserReq) returns (UpdateFriendUserRes);
    rpc RemoveFriendUser(UpdateFriendUserReq) returns (UpdateFriendUserRes);
    rpc ListFriendsUser(ListFriendsUserReq) returns (stream ListFriendsUserRes);
    rpc ListXFriendsUser(ListXFriendsUserReq) returns (ListXFriendsUserRes);
    rpc AddWalletUser(UpdateWalletUserReq) returns (UpdateWalletUserRes);
    rpc RemoveWalletUser(UpdateWalletUserReq) returns (UpdateWalletUserRes);
    // rpc ListWalletUser(ListWalletsUserReq) returns (stream ListFriendsUserRes);
    rpc CreateEvent(CreateEventReq) returns (CreateEventRes);
    rpc ReadEvent(ReadEventReq) returns (ReadEventRes);
    rpc UpdateEvent(UpdateEventReq) returns (UpdateEventRes);
    rpc DeleteEvent(DeleteEventReq) returns (DeleteEventRes);
    rpc ListEvents(ListEventsReq) returns (stream ListEventsRes);
    // files
    rpc Download(DownloadReq) returns (stream Chunk);
    // rpc Upload(stream Chunk) returns (UploadStatus) {}
}